package queue;
import java.util.*;
class HalfQueue
{
	 Queue<Integer> queue1=new LinkedList<>();
	   Queue<Integer> queue2=new LinkedList<>();
   void halve(Queue<Integer> a)
   {
	  
	  int half1=a.size()/2;
	  int half2=a.size()-half1;
	  int i=1,j=1;
	  while(i<=half1)
	  {
		  queue1.add(a.remove());
		  i++;
	  }
	  while(j<=half2) 
	  {
		  queue2.add(a.remove());
		  j++;
	  }
	  System.out.println(queue2);
	  interleaving(a);
   }
   
   void interleaving(Queue<Integer> a)
   {
	   int i=1,j=1;
	   while(i<=queue1.size())
	   {
		   a.add(queue1.remove());
		   if(j<=queue2.size())
		   {
			   a.add(queue2.remove());
			   j++;
		   }
		   i++;
	   }
	   
	   while(j<=queue2.size())
	   {
		   a.add(queue2.remove());
		   j++;
	   }
   }
}
public class Problem4 {

	public static void main(String[] args) {
		
		HalfQueue obj=new HalfQueue();
		Queue <Integer> a= new LinkedList<>();
		a.add(10);
		a.add(20);
		a.add(30);
	    a.add(40);
	    a.add(50);
		obj.halve(a); 
		System.out.println(a);

	}

}
